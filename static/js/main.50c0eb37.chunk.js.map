{"version":3,"sources":["components/atoms/Logo/style.js","components/atoms/Logo/index.jsx","components/atoms/Footer/style.js","components/atoms/Footer/index.jsx","components/molecules/List/style.js","components/molecules/List/index.jsx","components/pages/Home/style.js","components/pages/Home/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["LogoContainer","styled","div","LogoText","h1","LogoDescription","span","Logo","FooterContainer","FooterText","p","Footer","href","target","rel","ListContainer","ListTitle","h2","ListItems","ul","ListItemLink","a","ListItemTitle","h3","ListItemDesc","ListItem","li","List","props","category","projects","map","project","link","title","description","HomeContainer","Home","works","work","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"43MAGaA,EAAgBC,IAAOC,IAAV,mJAQbC,EAAWF,IAAOG,GAAV,0MAaRC,EAAkBJ,IAAOK,KAAV,2I,OCIbC,I,IAAAA,EApBf,WACE,OACE,eAACP,EAAD,WACE,eAACG,EAAD,qBAEE,8CAEF,eAACE,EAAD,iBAEG,IACD,yCACC,IAJH,iBAMG,IACD,gDCpBKG,EAAkBP,IAAOC,IAAV,yEAKfO,EAAaR,IAAOS,EAAV,2OCmBRC,I,cAAAA,EAnBf,WACE,OACE,eAACH,EAAD,WACE,cAACC,EAAD,IACA,cAACA,EAAD,IACA,eAACA,EAAD,WACE,mBAAGG,KAAK,8CAA8CC,OAAO,SAASC,IAAI,sBAA1E,sBACC,MACD,mBAAGF,KAAK,qCAAqCC,OAAO,SAASC,IAAI,sBAAjE,oBACC,MACD,mBAAGF,KAAK,uCAAuCC,OAAO,SAASC,IAAI,sBAAnE,wBACC,MACD,mBAAGF,KAAK,sCAAsCC,OAAO,SAASC,IAAI,sBAAlE,4BChBKC,EAAgBd,IAAOC,IAAV,6GAObc,EAAYf,IAAOgB,GAAV,6OAcTC,EAAYjB,IAAOkB,GAAV,yDAKTC,EAAenB,IAAOoB,EAAV,yEAKZC,EAAgBrB,IAAOsB,GAAV,sHAObC,EAAevB,IAAOS,EAAV,oIAQZe,EAAWxB,IAAOyB,GAAV,+OASfJ,EAGAE,GCdSG,I,EAAAA,EAlCf,SAAcC,GACZ,IACEC,EAEED,EAFFC,SACAC,EACEF,EADFE,SAGF,OACE,eAACf,EAAD,WACE,cAACC,EAAD,UACGa,IAEH,cAACX,EAAD,UACGY,EAASC,KAAI,SAACC,GAAD,OACZ,cAACZ,EAAD,CAAkCR,KAAMoB,EAAQC,KAAMpB,OAAO,QAA7D,SACE,eAACY,EAAD,WACE,cAACH,EAAD,UAAgBU,EAAQE,QACxB,cAACV,EAAD,UAAeQ,EAAQG,kBAHRH,EAAQE,gBCtBxBE,EAAgBnC,IAAOC,IAAV,mD,QCwBXmC,MAhBf,WACE,OACE,eAACD,EAAD,WACE,cAAC,EAAD,IACCE,IAAMP,KAAI,SAACQ,GAAD,OACT,cAAC,EAAD,CAEEV,SAAUU,EAAKV,SACfC,SAAUS,EAAKT,UAFVS,EAAKV,aAKd,cAAC,EAAD,QCdSW,MANf,WACE,OACE,cAAC,EAAD,KCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.50c0eb37.chunk.js","sourcesContent":["/* eslint-disable quotes */\nimport styled from \"styled-components\";\n\nexport const LogoContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  margin-top: -20px;\n`;\n\nexport const LogoText = styled.h1`\n  font-family: \"Raleway\", sans-serif;\n  font-weight: 300;\n  font-size: 40px;\n  text-align: center;\n  opacity: 0.8;\n  margin: 0;\n\n  span {\n    font-weight: 500;\n  }\n`;\n\nexport const LogoDescription = styled.span`\n  display: block;\n  font-family: \"Ubuntu\", sans-serif;\n  opacity: 0.4;\n\n  b {\n    font-weight: 700;\n  }\n`;\n","import React from 'react';\n\nimport {\n  LogoContainer,\n  LogoText,\n  LogoDescription,\n} from './style';\n\nfunction Logo() {\n  return (\n    <LogoContainer>\n      <LogoText>\n        gustavo\n        <span>teodoro</span>\n      </LogoText>\n      <LogoDescription>\n        web\n        {' '}\n        <b>engineer</b>\n        {' '}\n        and multimedia\n        {' '}\n        <b>producer</b>\n      </LogoDescription>\n    </LogoContainer>\n  );\n}\n\nexport default Logo;\n","import styled from 'styled-components';\n\nexport const FooterContainer = styled.div`\n  max-width: 600px;\n  margin: 40px auto 0;\n`;\n\nexport const FooterText = styled.p`\n  font-family: 'Ubuntu', sans-serif;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 2;\n  text-align: center;\n  opacity: .8;\n  margin: 0;\n\n  a {\n    color: black;\n    font-weight: 700;\n  }\n`;\n","import React from 'react';\n\nimport {\n  FooterContainer,\n  FooterText,\n} from './style';\n\nfunction Footer() {\n  return (\n    <FooterContainer>\n      <FooterText />\n      <FooterText />\n      <FooterText>\n        <a href=\"https://www.linkedin.com/in/gustavoteodoro/\" target=\"_blank\" rel=\"noopener noreferrer\">Linkedin</a>\n        {' - '}\n        <a href=\"https://github.com/gustavoteodoro/\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>\n        {' - '}\n        <a href=\"https://soundcloud.com/escutegustavo\" target=\"_blank\" rel=\"noopener noreferrer\">Soundcloud</a>\n        {' - '}\n        <a href=\"https://www.last.fm/user/gustavoteo\" target=\"_blank\" rel=\"noopener noreferrer\">Last.fm</a>\n      </FooterText>\n\n    </FooterContainer>\n  );\n}\n\nexport default Footer;\n","/* eslint-disable quotes */\nimport styled from \"styled-components\";\n\nexport const ListContainer = styled.div`\n  display: block;\n  max-width: 600px;\n  margin: 0 auto;\n  padding-top: 40px;\n`;\n\nexport const ListTitle = styled.h2`\n  font-family: \"Ubuntu\", sans-serif;\n  font-weight: 400;\n  font-size: 20px;\n  opacity: 0.8;\n  margin: 0;\n  padding-bottom: 5px;\n  border-bottom: 1px dashed #ccc;\n\n  span {\n    font-weight: 500;\n  }\n`;\n\nexport const ListItems = styled.ul`\n  margin: 0;\n  padding: 0;\n`;\n\nexport const ListItemLink = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport const ListItemTitle = styled.h3`\n  display: inline-block;\n  margin: 0;\n  font-size: 14px;\n  transition: all 0.3s ease;\n`;\n\nexport const ListItemDesc = styled.p`\n  margin: 0;\n  font-size: 12px;\n  transition: all 0.3s ease;\n  color: #888;\n  margin: 10px 10px 0;\n`;\n\nexport const ListItem = styled.li`\n  display: block;\n  padding: 15px 0 0;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: #000;\n    padding: 15px;\n\n    ${ListItemTitle} {\n      color: #fff;\n    }\n    ${ListItemDesc} {\n      color: #fff;\n    }\n  }\n`;\n","import { arrayOf, string } from 'prop-types';\nimport React from 'react';\n\nimport {\n  ListContainer,\n  ListTitle,\n  ListItems,\n  ListItem,\n  ListItemLink,\n  ListItemTitle,\n  ListItemDesc,\n} from './style';\n\nfunction List(props) {\n  const {\n    category,\n    projects,\n  } = props;\n\n  return (\n    <ListContainer>\n      <ListTitle>\n        {category}\n      </ListTitle>\n      <ListItems>\n        {projects.map((project) => (\n          <ListItemLink key={project.title} href={project.link} target=\"blank\">\n            <ListItem>\n              <ListItemTitle>{project.title}</ListItemTitle>\n              <ListItemDesc>{project.description}</ListItemDesc>\n            </ListItem>\n          </ListItemLink>\n        ))}\n      </ListItems>\n    </ListContainer>\n  );\n}\n\nList.propTypes = {\n  category: string.isRequired,\n  projects: arrayOf({\n    title: string,\n    link: string,\n    description: string,\n  }).isRequired,\n};\n\nexport default List;\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable quotes */\nimport styled from \"styled-components\";\n\nexport const HomeContainer = styled.div`\n  padding: 40px 20px;\n`;\n","import React from 'react';\n\nimport Logo from '../../atoms/Logo';\nimport Footer from '../../atoms/Footer';\nimport List from '../../molecules/List';\n\nimport {\n  HomeContainer,\n} from './style';\n\nimport { works } from './data.json';\n\nfunction Home() {\n  return (\n    <HomeContainer>\n      <Logo />\n      {works.map((work) => (\n        <List\n          key={work.category}\n          category={work.category}\n          projects={work.projects}\n        />\n      ))}\n      <Footer />\n    </HomeContainer>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport Home from './components/pages/Home';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable quotes */\n/* eslint-disable no-undef */\n/* eslint-disable react/jsx-filename-extension */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}